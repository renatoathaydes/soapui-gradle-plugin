apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'idea'

group = 'com.smartbear.soapui'
version = '1.0-SNAPSHOT'

description = 'SoapUI - Gradle Plugin'

sourceCompatibility = 1.7
targetCompatibility = 1.5



repositories {
	mavenLocal()
	mavenCentral()
	maven { url "http://www.eviware.com/repository/maven2" }
}

test {
	testLogging.showStandardStreams = true
	beforeTest { descriptor ->
		logger.lifecycle( "Running test: " + descriptor )
	}
}

configurations.all {
	resolutionStrategy {
		failOnVersionConflict()
		force 'log4j:log4j:1.2.12',
				'commons-codec:commons-codec:1.4',
				'commons-io:commons-io:1.4',
				'org.apache.httpcomponents:httpcore:4.1.1',
				'commons-logging:commons-logging:1.1.1',
				'commons-lang:commons-lang:2.4',
				'xalan:xalan:2.7.1',
				'xml-apis:xml-apis:1.3.04',
				'junit:junit:4.10',
				'xom:xom:1.1',
				'org.apache.santuario:xmlsec:1.4.5'

	}
}

dependencies {
	compile gradleApi()
	compile( group: 'com.smartbear.soapui', name: 'soapui', version: '4.6.1' ) {
		exclude( module: 'jxbrowser' )
		exclude( module: 'comfyj' )
		exclude( module: 'winpack' )
		exclude( module: 'xulrunner-windows' )
		exclude( module: 'xulrunner-linux64' )
		exclude( module: 'xulrunner-linux' )
		exclude( module: 'xulrunner-mac' )
		exclude( module: 'MozillaInterfaces' )
		exclude( module: 'engine-gecko' )
		exclude( module: 'engine-gecko15' )
		exclude( module: 'engine-ie' )
		exclude( module: 'engine-webkit' )
		exclude( module: 'jniwrap' )
		exclude( module: 'xulrunner15-mac' )
		exclude( module: 'xulrunner15-windows' )
		exclude( module: 'forms' )
		exclude( module: 'looks' )
		exclude( module: 'binding' )
		exclude( module: 'jtidy' )
		exclude( module: 'cajo' )
		exclude( module: 'log4j' )
	}
	testCompile( group: 'org.spockframework', name: 'spock-core', version: '0.7-groovy-1.8' ) {
		exclude module: 'groovy-all'
	}
	testCompile group: 'cglib', name: 'cglib-nodep', version: '2.2.2'
}

jar {
	dependsOn "compileGroovy"
	manifest {
		attributes(
				"Implementation-Title": "SoapUI Gradle Plugin",
				"Implementation-Version": version )
	}
}

task( deps ) << {
	project.configurations.runtime.collect { it.name }.sort().each {
		println it
	}
}


